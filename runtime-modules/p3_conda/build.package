#!/usr/bin/env perl

use strict;

use Carp;
use File::Basename;
use Cwd 'abs_path';

my $dest = $ENV{TARGET} || "/kb/runtime";
my $parallel = 4;

if (@ARGV)
{
    $dest = shift;
    print STDERR "Overriding destination to $dest\n";
}
my $runtime = $dest;
if (@ARGV)
{
    $runtime = shift;
}

my $p3 = "/disks/patric-common/runtime";
if (! -d $p3)
{
    $p3 = $dest;
    if (! -d $p3)
    {
	die "Cannot find $p3\n";
    }
}
my $build_tools = "$p3/build-tools";

#
# Initialize a conda build setup for tools that use that.
#

#my $vers = "Miniconda3-py38_4.8.2";
my $vers = "Miniconda3-py39_4.12.0";
#my $vers = "Miniconda3-py39_4.9.2";
#my $vers = "Miniconda3-py39_4.10.3";
#my $vers = "Anaconda3-2021.05";

my $app_dest = "$dest/conda-$vers";
run("rm", "-rf", $app_dest, "$dest/conda");

#run("curl", "-O", "-L", "https://repo.anaconda.com/archive/$vers-Linux-x86_64.sh");
run("curl", "-O", "-L", "https://repo.anaconda.com/miniconda/$vers-Linux-x86_64.sh");
run("sh", "$vers-Linux-x86_64.sh", "-p", $app_dest, "-b", "-s");

#run("patchelf", "--set-interpreter", "$dest/glibc-2.17/lib/ld-linux-x86-64.so.2", "$app_dest/bin/python");

#run(". $app_dest/bin/activate; conda update  -y -n base -c defaults conda; conda install -y mamba -n base -c conda-forge");
run(". $app_dest/bin/activate;  conda install -y mamba -n base -c conda-forge; conda update  -y -n base -c defaults conda");

symlink("conda-$vers", "$dest/conda");

sub run
{
    print "@_\n";
    my $rc = system(@_);
    $rc == 0 or die "Command failed with rc=$rc: @_\n";
}
