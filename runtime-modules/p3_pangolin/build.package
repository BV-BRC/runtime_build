#!/usr/bin/env perl

use strict;

use Carp;
use File::Basename;
use Cwd qw(getcwd abs_path);

my $dest = $ENV{TARGET} || "/kb/runtime";
my $parallel = 4;

if (@ARGV)
{
    $dest = shift;
    print STDERR "Overriding destination to $dest\n";
}
my $runtime = $dest;
if (@ARGV)
{
    $runtime = shift;
}

my $p3 = "/disks/patric-common/runtime";
if (! -d $p3)
{
    $p3 = $dest;
    if (! -d $p3)
    {
	die "Cannot find $p3\n";
    }
}

my $perform_patch;
my $build_tools = "$p3/build-tools";

my $app_dest = "$dest/pangolin";
my $vers = "v4.3.1";
#my $vers = "v4.0.3";
#my $vers = "v3.1.20";

system("rm", "-rf", $app_dest);
system("rm", "-rf", "pangolin");

#
# We need to have libarchive.so.13 in our LD_LIBRARY_PATH for the builds. Create a local copy
#


my $here = getcwd;
#my $libarchive_vers = "3.7.2";
#my $libarchive_install = "$here/libarchive";
#my $libarchive = "libarchive-$libarchive_vers";
#run("rm", "-rf", $libarchive, $libarchive_install);
#run("curl", "-O", "-L", "https://github.com/libarchive/libarchive/releases/download/v$libarchive_vers/$libarchive.tar.gz");
#run("tar", "xzfp", "$libarchive.tar.gz");
#chdir($libarchive) or die "cannot chdir $libarchive: $!";
#run("./configure", "--prefix", $libarchive_install);
#run("make", "-j12");
#run("make", "install");
#$ENV{LD_LIBRARY_PATH} = "$libarchive_install/lib";
#chdir("..");

#
# For medaka we need to rely on the conda configuration that was set up by p3_conda
#

run(". $dest/conda/bin/activate; conda env create -p $app_dest -f ./environment.yml");
run("patchelf", "--set-interpreter", "$dest/glibc-2.17/lib/ld-linux-x86-64.so.2", "$app_dest/bin/python") if $perform_patch;

run("git", "clone", "https://github.com/cov-lineages/pangolin");
chdir "pangolin";
run("git", "checkout", $vers);

run(". $dest/conda/bin/activate; conda env update -p $app_dest -f ./environment.yml");
#run(". $dest/conda/bin/activate; mamba env update -p $app_dest -f ./environment.yml");
$ENV{PATH} = "$app_dest/bin:$ENV{PATH}";
run("pip", "install", ".");

#
# More hacking for CentOS6
#
if (0)
{
    run("$app_dest/bin/pip", "uninstall", "-y", "pysam");
    {
	local $ENV{PIP_CACHE_DIR} = "/tmp";
	run("$app_dest/bin/pip", "install", "pysam");
    }
    run("sed", "-i.bak", "-e", "/^from sqlite3/s/^/#/", "$app_dest/lib/python3.8/site-packages/Bio/AlignIO/MafIO.py");
}
unlink("$dest/bin/pangolin");
open(P, ">", "$dest/bin/pangolin") or die "Cannot write $dest/bin/pangolin: $!";
print P <<END;
#!/bin/sh
export PATH=$app_dest/bin:\$PATH
$app_dest/bin/pangolin "\$@"
END

run("chmod", "+x", "$dest/bin/pangolin");

sub run
{
    print "@_\n";
    my $rc = system(@_);
    $rc == 0 or die "Command failed with rc=$rc: @_\n";
}
