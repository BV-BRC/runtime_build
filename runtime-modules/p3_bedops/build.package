#!/usr/bin/env perl

use strict;
use File::Basename;
use File::Find;
use File::Copy qw(cp);
use File::Path qw(make_path);
use Cwd qw(abs_path getcwd);
my $cwd = getcwd();

my @parallel = ("-j", 8);

my $top_dest = $ENV{TARGET} || "/kb/runtime";
if (@ARGV)
{
    $top_dest = shift;
}

my $dest = $top_dest;

my $build_tools = $ENV{BUILD_TOOLS} // "$dest/build-tools";

print "using $dest as installation directory\n";
system ("mkdir", "-p", $dest) unless -e $dest;

my $dir;
$ENV{PATH} = "$build_tools/bin:$ENV{PATH}";

my $dir = "bedops";

my $tag = "v2.4.39";

$ENV{PATH} = "$build_tools/bin:$top_dest/bin:$ENV{PATH}";
$ENV{LDFLAGS} = "-Wl,-rpath,$build_tools/lib64 -Wl,-rpath,$build_tools/lib";
$ENV{CC} = "$build_tools/bin/gcc";
$ENV{CXX} = "$build_tools/bin/g++";

run("rm", "-rf", $dir);
run("git", "clone", "https://github.com/bedops/bedops.git", $dir);

chdir($dir) or die "cannot chdir $dir: $!";
if ($tag)
{
    run("git", "checkout", $tag);
}

run("make", @parallel);
run("make", "install");

for my $f (glob("bin/*"))
{
    unlink("$dest/$f");
}

run("cp bin/* $dest/bin/.");

sub download_tool
{
    my($url, $dest) = @_;

    my $file = basename($url);
    my($dir,$comp) = $file =~ /^(.*)\.(tar\.gz|tgz|tar\.bz2)$/;

    my %comp_option = ('tar.gz' => 'z',
		       'tgz' => 'z',
		       'tar.bz2' => 'j');
    my $comp_option = $comp_option{$comp};

    if (! -s $file)
    {
	run("curl", "-o", $file, "-L", $url);
    }

    my @dirs_before = grep { -d $_ } <*>;
    system("rm", "-rf", $dir);
    run("tar",  "xf$comp_option",  $file);
    my @dirs_after = grep { -d $_ } <*>;
    my %dirs_before = map { $_ => 1 } @dirs_before;
    my @dirs_new = grep { ! exists $dirs_before{$_} } @dirs_after;
    if (@dirs_new == 1)
    {
	if ($dirs_new[0]  ne $dir )
	{
	    print STDERR "Download went to $dirs_new[0]\n";
	    $dir = $dirs_new[0];
	}
    }
    elsif (@dirs_new == 0)
    {
	print STDERR " ? no new dir created\n";
    }
    else
    {
	print STDERR "? more than one new dir created\n";
    }

    -d $dir or die "$dir not found after extraction";
    return $dir;
}

sub build_tool
{
    my($dir, $dest) = @_;

    chdir $dir or die "could not chdir $dir: $!";

    run("./configure", "--prefix", $dest);
	
    run("make", "-j", "6");
    run("make", "install");
}
    
sub do_chdir
{
    my($dir) = @_;
    if (!chdir($dir))
    {
	my $here = getcwd();
	die "chdir $dir from $here failed: $!";
    }
}

sub run
{
    my(@cmd) =@_;
    print "@cmd\n";
    my $rc = system(@cmd);
    if ($rc != 0)
    {
	die "Command failed with rc=$rc: @cmd\npath=$ENV{PATH}\n";
    }
}
