package [% module.impl_package_name %];
use strict;

=head1 NAME

[% module.module_name %]

=head1 DESCRIPTION

[% module.module_doc %]

=cut

#BEGIN_HEADER
[% module.module_header -%]
#END_HEADER

sub new
{
    my($class, @args) = @_;
    my $self = {
    };
    bless $self, $class;
    #BEGIN_CONSTRUCTOR
[% module.module_constructor -%]
    #END_CONSTRUCTOR

    if ($self->can('_init_instance'))
    {
	$self->_init_instance();
    }
    return $self;
}

=head1 METHODS

[% FOREACH method IN module.methods %]

=head2 [% method.name %]

  [% IF method.ret_vars -%][% method.ret_vars -%] = [% END -%]$obj->[% method.name %]([% method.arg_vars %])

=over 4

=item Parameter and return types

=begin html

<pre>
[% FOREACH docline IN method.arg_doc -%]
[% docline %]
[% END %]
</pre>

=end html

=begin text

[% FOREACH docline IN method.arg_doc -%]
[% docline %]
[% END %]

=end text



=item Description

[% method.doc %]

=back

=cut

sub [% method.name %]
{
    my($self
       [%- IF method.arg_count > 0 -%], [% method.arg_vars %][% END %]) = @_;
    my $ctx = $[% server_package_name %]::CallContext;
    my([% method.ret_vars %]);
    #BEGIN [% method.name %]
[% method.user_code -%]
    #END [% method.name %]
    return([% method.ret_vars %]);
}


[% END %]

=head1 TYPES

[% FOREACH type IN module.types %]

=head2 [% type.name %]

=over 4

[% IF type.comment %]

=item Description

[% type.comment %]
[% END %]

=item Definition

=begin html

<pre>
[% type.english %]
</pre>

=end html

=begin text

[% type.english %]

=end text

=back

[% END %]

=cut

1;
